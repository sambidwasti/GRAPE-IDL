
Pro Cal_Plot, InputFileFolderPath,Anode=Anode, BIN=BIN, Type=Type ,Inves=Inves
  ; *************************************************************************
  ; *     Plotting and Fitting functions to a Spectrum(Histogram) File      *
  ; *************************************************************************
  ; * Version: 1.01                                                         *
  ; *                                                                       *
  ; * Purpose:  Read the Spectrum File and do a background subtraction      *
  ; *           and plot the histogram. Then it allows a graphical way      *
  ; *           to fit the histogram.                                       *
  ; *                                                                       *
  ; * References: readDataFiles.pro                                         *
  ; *            [ Reads in Ascii files ]                                   *
  ; *             Dir_Exist.pro                                             *
  ; *            [ Checks the Existence of Directory]                       *
  ; *                                                                       *
  ; * Usage:                                                                *
  ; *                     ******KEYWORDS*******                             *
  ; *     Keyword Parameters::                                              *
  ; *     BIN = Number of Bins for Rebinning. Default is 1024               *
  ; *           We can only input 512, 256 and 128.                         *
  ; *                                                                       *
  ; *     Inputs::                                                          *
  ; *           InputFileFolderPath: Path of the Folder that contains the   *
  ; *                   The Input files. Need this parameter to run the     *
  ; *                   The Program.                                        *
  ; *                                                                       *
  ; *           An0de :  This Parameter sets anode number for a single anode*
  ; *                   to Look at.                                         *
  ; *                                                                       *
  ; *           Type :  This should let us choose P or C calibration or both*
  ; *                                                                       *
  ; *           Inves: Flag to investigate the anode, that changes to the   *
  ; *                  following:                                           *
  ; *                  - Overplot, Source and background                    *
  ; *                  - Changes Y Scales                                   *
  ; *                                                                       *
  ; *     Outputs::                                                         *
  ; *           All the outputs are in the same folder as the Input Folder  *
  ; *           For NOW                                                     *
  ; *                                                                       *
  ; *           Fitted*: Folder for fitted function and Plots               *
  ; *           Parameter File: File of fitted parameter and errors( Text ) *
  ; *           ( File names are defined by the entered Energy Value while  *
  ; *             on the run   )                                            *
  ; *                                                                       *
  ; * Involved Non-Library Procedures:                                      *
  ; *           -Dir_Exist.pro                                              *
  ; *           -AnodeType.pro                                              *
  ; *                                                                       *
  ; * Libraries Imported:                                                   *
  ; *           -Coyote Full Library                                        *
  ; *           -Astronomy Full Library                                     *
  ; *           -MPFit Full Library. For fitting functions.                 *
  ; *                                                                       *
  ; * File Formats:   ASCII TEXT FILES                                      *
  ; *             The Text files generated by Cal_Histogram.                *
  ; *             Few initial lines filled with file info like              *
  ; *             FileName, Live Time, Time ran, ETC.                       *
  ; *             Total number of lines to skip is fixed in Cal_Histogram   *
  ; *                                                                       *
  ; *             Format:                                                   *
  ; *             Anode N1 N2 ... N1024                                     *
  ; *             Each String after that has Anode number and 1024 channel  *
  ; *             Histogram( Counts of the PulseHeight )                    *
  ; *                                                                       *
  ; * -----------------------FITTING INFO-----------------------------------*
  ; *       We use the MPFIT to fit the function. I have used the Cursor    *
  ; *       to make it more Graphical and User Friendly to fit the functions*
  ; *                                                                       *
  ; *       We can select a different fitting function on top of the        *
  ; *       Gaussian, (Graphically). We have the liberty of choosing the    *
  ; *       initial peak position and the data( select ) to be fitted       *
  ; *                                                                       *
  ; *       We can do this again and again unless satisfied with the fit    *
  ; *-----------------------------------------------------------------------*
  ; *                                                                       *
  ; * Author: 10/16/13  Sambid Wasti                                        *
  ; *                   Email: Sambid.Wasti@wildcats.unh.edu                *
  ; *                                                                       *
  ; * Revision History:                                                     *
  ; *         10/28/13  Sambid Wasti:                                       *
  ; *                   Added Polynomial Fit                                *
  ; *                   Added Gaussian Only Fit                             *
  ; *                                                                       *
  ; *         10/30/13  Sambid Wasti:                                       *
  ; *                   Added a Keyword Type                                *
  ; *                   Output file:  Fit info added                        *
  ; *                                 Total Counts Removed                  *
  ; *                                                                       *
  ; *         12/04/13  Sambid Wasti:                                       *
  ; *                   Modified the output folder to add 'pla' or 'cal'    *
  ; *                                 for different fits. (+'_' in folder)  *
  ; *         12/20/13  Sambid Wasti:                                       *
  ; *                   Now even the gaussian fit only plots selected.      *
  ; *                                                                       *
  ; *         10/14/14  Sambid Wasti:                                       *
  ; *                   Added Inves keyword to investigate.                 *
  ; *         12/02/14  Sambid Wasti:                                       *
  ; *                   Identation/ Comments and addition of Chisqr         *
  ; *                   Also now it generates pdf rather than ps            *
  ; *                   (About time i do this)                              *
  ; * NOTE:   ( Going to keep it like this until needed )                   *
  ; *           This code could be more efficient                           *
  ; *                                                                       *
  ; *************************************************************************
  ; *************************************************************************

  ;-- For Ease of Flags --  
  True = 1
  False= 0
  
  ;
  ;============= INITIALIZATION OF KEYWORDS/FlAGS and SOME VARIABLES ==========================
  ;
  
      ;
      ;--- Anode ---
      ;
      If Keyword_Set(Anode) EQ 0 Then Single_Anode = False Else Single_Anode = True
  
      ;
      ;--- Inves --- (Debugging tool)
      ;
      If Keyword_Set(Inves) EQ 0 Then Inves_Flag = False Else Inves_Flag = True
  
      ;
      ;--- Type --- Defining Cal and Pla anodes
      ;
      If Keyword_Set(Type)  EQ 0 Then Begin
          Type_Flag = False
          Folder_Val=''
      EndIf Else Begin
          Type_Flag = True
          
          If (Type NE 2) and (Type NE 1) Then BEgin
          Print, ' TYPE ERROR: Enter 2 for Plastics and 1 for Calorimeters.
          Return
          EndIf
          
          If Type Eq 2 then Begin
          Type =0
          Folder_Val = '_pla'
          EndIF Else If Type eq 1 Then Folder_Val = '_cal'
      EndElse
      
      ;
      ;--- Number of BINS --- (This should actually be NBINS)
      ;
      If Keyword_Set(BIN) EQ 0 Then BIN=1024 Else Begin
            
            If (1024 mod BIN) NE 0 Then Begin
                Print, 'ERROR: Please make BIN an integer divisible of 1024'
                Return
            Endif
        
            If ( BIN LT 128) Then Begin
                Print, 'ERROR: Too Small Binsize: Please make it >= 128'
                Return
            EndIf
      EndElse
      BIN_Scale = FIX(1024/BIN)
      
      ;
      ;--- Input Folder and Paths ---
      ;
      InputFileFolderPath = Rmv_Bk_Slash(InputFileFolderPath)     ; Removes the Back Slash if there are any.
      Search_KeyWord = '*000deg*Spect.txt'                        ; For Flood Spectrum File Selection
      InputFileFolderPath = InputFileFolderPath+'/'
 
      ;
      ;--- Input Files ---
      ;
      FileNames = File_Search( InputFileFolderPath, Search_KeyWord)
     
      If( N_elements(FileNames)) EQ 0 Then Begin
        Print, 'ERROR: NO FILE EXISTS WITH *000deg*Spect*.txt'
        Return
      EndIf
      
      ;
      ;--- No. of Files ---
      ;
      NSrc = N_elements(FileNames)          ; Number of Source File( usually at max 2 with Background)
  
      ;
      ;--- Now some Variables ---
      ;
      
      ;
      ;-- Main Array --
      ;
      Anode_Histogram = LONArr(NSrc,64,1024)           
  
      ;
      ;-- Arrays for each file.--
      ;
      
      ; Live Time
      Live_Time = FLTARR(NSRC)
      
      ; Source Counts
      Source    = StrArr(NSRC)
      
      ; Run Time
      Time_Ran  = LONARR(NSRC) ; in MINS
      
      ; Module No.
      Module    = StrArr(NSRC)
      
      ; File Name
      File_Name = StrArr(NSRC)
      
  ;
  ;==== INITIALIZATION FINISHED ======   
  ;   
  
  ;
  ;==== READ THE INPUT FILES =====
  ;
      For q = 0, NSrc-1 Do Begin
        
        ;
        ;--- Read values from the begining lines of the files ---
        ;
        
        Fname = FileNames[q]
        Print,Fname
        
        Temp_Count = 0L
        Openr, Lun, Fname, /Get_Lun
        data=''
        
        ;
        ;-- File Path and Name
        ;
        ReadF, Lun, data   ; This is File location
        Pos = StrPos(Data,':',1)+1
        Pos1= StrLen(Data)
        File_Name[q]= Strmid(Data, Pos,Pos1-Pos)
        
        ;
        ;--- Source or Background ---
        ;
        ReadF, Lun, data   ; This is Source
        Pos = StrPos(Data,':',1)+1
        Pos1= StrLen(Data)
        Source[q] = Strmid(Data, Pos,Pos1-Pos)
        
        ;
        ;--- Module No.---
        ;
        ReadF, Lun, data   ; This is for the Module
        Pos = StrPos(Data,':',1)+1
        Pos1= StrLen(Data)
        Module[q] = Strmid(Data, Pos,Pos1-Pos)
        
        ;
        ;---- Empty Line for now ---
        ;
        ReadF, Lun, data   ; This is Empty for now
        Pos = StrPos(Data,':',1)+1
        Pos1= StrLen(Data)
        
        ;
        ;---- Average Live Time ----
        ;
        ReadF, Lun, data   ; This is for the Average Live Time
        Pos = StrPos(Data,':',1)+1
        Pos1= StrLen(Data)
        Live_Time[q] = Float(Strmid(Data, Pos,Pos1-Pos))
        
        ;
        ;---- Total Time Ran ----
        ;
        ReadF, Lun, Data   ; This is for the Total time ran
        Pos = StrPos(Data,':',1)+1
        Pos1= StrLen(Data)
        Time_Ran[q] = Long(Strmid(Data, Pos,Pos1-Pos))
        
        ReadF, Lun, Data   ; This is empty for now
        ReadF, Lun, Data   ; This is empty for now
        ReadF, Lun, Data   ; This is empty for now
        ReadF, Lun, Data   ; This is empty for now
        
        Temp_Pos = 0
        
        ;
        ;---- Read in the values and store it -----
        ;
        While Not EOF(Lun) DO Begin
            ReadF, Lun, Data
            p = Fix(strmid(Data,0,2)); Anode no.
            
            For i = 0 , 1023 Do BEgin
                Pos = StrPos(Data, ' ', Temp_Pos)
                Temp_Pos = StrPos(Data, ' ',Pos+1)
                Anode_Histogram[q,p,i] = LONG(StrMid(Data,Pos+1,Temp_Pos-Pos-1))
            EndFor
        
        EndWhile
      
        Free_Lun, Lun
        
    Endfor ; End q
    ;
    ;==Values Stored : Anode_Histogram[Source, Anode, PulseHeightCounts] ==
    ;
    
    ;
    ;--- The X-Axis Array ---
    ;
    XFit = Float(INDGEN(BIN)*BIN_Scale)
  
    Back_Flag = False
    
    ;
    ;--- Using the standard Naming Convention, Get the Background File's index
    ;
    For i = 0, NSrc-1 Do Begin
          Temp_Source = Source[i]
          
          If StrMid(Temp_Source,0,4) EQ 'Back' then BEgin
                Back_Index=i
                Back_Flag = True
          EndIf
    EndFor; i
    If Back_Flag EQ False then Back_Index = -1
     
    ;
    ;***********
    ;===============  GUI : PLOTTING AND FITTING ===========
    ;***********
    ;
     
        ;
        ;---- LOGIN SCREEN ----
        ;
        Plot, INDGEN(1024), INDGEN(1024),XRANGE=[0,1024],XSTYLE=1,YRANGE=[0,100],YSTYLE=1, /Nodata
        XYOUTS, 250,400, ' FITTING PROGRAM (  IDL  ) ',     CharSize=4,COLOR=CGColor('RED'),/Device
        XYOUTS, 100,300, ' Created by Sambid Kumar Wasti (09/23/13)',CharSize=3.4,COLOR=CGColor('YELLOW'),/Device
        XYOUTS, 300,200, ' CLICK TO CONTINUE',              CharSize=4,COLOR=CGColor('GREEN'),/Device
        XYOUTS, 400,100, ' (c) All rights reserved!',       CharSize=2,COLOR=CGColor('White'),/Device
        Cursor, Temp_X, TEMp_Y, /Down,/Device
        
        ;
        ;--- Default value ---
        ;
        F=4 
       
        ;
        ;--- For Each Source ( Background gets skipped)----
        ;NOTE: THis has the ability to work with 2 different source with 1 background but we havent tried that yet.
        ;
        
        For q= 0,NSrc-1 Do Begin
            If q EQ Back_Index Then Goto, Jump1   ; Skip if its Background
    
              ;
              ;---- Grab Few more Input Parameters ----
              ; 
              Plot, INDGEN(1024), INDGEN(1024),XRANGE=[0,1024],XSTYLE=1,YRANGE=[0,1],YSTYLE=1, /Nodata
              
              XYOUTS, 250,400, ' NOW ENTER ENERGY ',        CharSize=4,COLOR=CGColor('RED'),/Device
              XYOUTS, 200,300, ' Trying to fit the Peak ',  CharSize=4,COLOR=CGColor('RED'),/Device
              XYOUTS, 250,200, ' IN THE TERMINAL  ',        CharSize=4,COLOR=CGColor('RED'),/Device
              XYOUTS, 250,100, ' Enter Various Parameters ',CharSize=4,COLOR=CGColor('RED'),/Device
              
              Ener = ''
              Print, ' *************************************************'
              Print, ' *************************************************'
              Print, ' *************************************************'
              
;              Read, Ener, PROMPT=' Enter the Energy Value for '+Source[q]+' peak tryig to Fit = '
;              Read, X_MIN_Val, PROMPT=' Minimum X for the Plot   = '
;              Read, X_MAX_Val, PROMPT=' Maximum X For the Plot   = '
              Ener='22a'
              X_MIN_Val= 0L
              X_MAX_Val= 100L
              
              ;
              ;--- Scale the Xmin and Xmax according to the NBIns ---
              ;
              X_MIN_Ar= FIX(Float(X_Min_Val)/Float(BIN_SCALE))
              X_MAX_Ar= FIX(Float(X_Max_Val)/Float(BIN_SCALE))
              
              ;
              ;--- Creating the KEV Text Files ----
              ;
              Text_File_Name = Module[q]+'_'+Source[q]+'_'+Ener+Folder_Val+'_KEV.txt'
              Text_File      = InputFileFolderPath + Text_File_Name
              
              ;
              ;--- Head Lines for the Text File.
              ;
              Openw, Lun, Text_File ,/Get_Lun
              Printf, Lun, ' == This is a file of Fitted Parameters and their respective Errors =='
              Printf, Lun, 'File Name       :' +File_Name[q]
              Printf, Lun, 'Module Number   :' +Module[q]
              Printf, Lun, 'Source          :' +Source[q]
              Printf, Lun, 'Avg Live Time   :' + Strn(Live_Time[q])
              Printf, Lun, 'Time Ran        :' + Strn(Time_Ran[q])
              Printf, Lun, 'Fit Function 0:Exponential, 1:Quadratic, 2:Polymeric, 3: Double Gaussian--  4:Gaussian(only)  '
              Printf, Lun, 'Function 0       :A[0] + Gauss1(X,A1:A3) + A4 Exp( A5/(X-A6)^A7 )  { 8 parameters }'
              Printf, Lun, 'Function 1       :A[0] + Gauss1(X,A1:A3) + A4*X +A5*X*X            { 6 parameters }'
              Printf, Lun, 'Function 2       :A[0] + Gauss1(X,A1:A3) + A4 / (A5-X)^A6          { 7 parameters }'
              Printf, Lun, 'Function 3       :A[0] + Gauss1(X,A1:A3) + Gauss2(X,A4:A6)         { 7 parameters }'
              Printf, Lun, 'Function 4       :A[0] + Gauss1(X,A1:A3) and A[0] fixed.           { 4 parameters }'
              Printf, Lun, ' '
              Printf, Lun, '# Fit Ener  A[0]          A[0]Err        A[1]          A[1]Err      A[2]          A[2]Err      A[3]        A[3]Err          A[4]         A[4]Err      A[5]          A[5]Err       A[6]        A[6]Err       A[7]        E[7]Err'
              Printf, Lun, '==============================================================================================================================================================================================================================='
              Free_Lun, Lun
              
              ;
              ;---- Check for Single Anode thing
              ;
              If Single_Anode EQ True Then Begin
                    p = Anode
                    Goto, Jump_Anode_Loop
              EndIf
              
              ;
              ;---- For Each Anodes -----
              ;
              For p=0,63 Do Begin
                    Jump_Anode_Loop:        ; Just do it for 1 anode if Anode defined...
                    print, p
                    
                    ;
                    ;--- Check for Plastic or Cal checks ----
                    ;
                    IF (Type_Flag Eq True) Then If (AnodeType(p+1) EQ Type) then Goto, Jump2
                    
                    ;
                    ;---- Open and Write in the text file created above -----
                    ;
                    Openw, Lun, Text_File ,/Get_Lun,/Append
      
                    ;
                    ;===== Rebinning and Rescaling for each anode =====
                    ;
                        
                      ;
                      ;---- Source File Rebinning ----
                      ;
  
                      Temp_Hist     = LonArr(1024)
                      Hist          = LonArr(BIN)
                      Hist_Err      = DblArr(BIN)
                      Temp_Hist_Ct  = 0L
  
                      For i=0,1023 Do Temp_Hist[i] = Anode_Histogram[q,p,i]
  
                      For i=0,1023 do Begin
                        Temp_Val=0L
  
                        For j = 0,Bin_Scale-1 Do Begin
                          Temp_Val= Temp_Val+ Temp_Hist[i+j]
                        EndFor
  
                        ;
                        ;--- Source Histogram
                        ;
                        Hist[Temp_Hist_Ct] = Temp_Val
                        Temp_Hist_Ct++
                        i=i+j-1
                      EndFor
  
                      ;
                      ;--- Source Error---
                      ;
                      Src_Err = Sqrt(Abs(Hist))
                      
                   
                      ;
                      ;--- Background Rebinning and Eventually Rescalling.---
                      ;
                      
                      If Back_Flag EQ TRue THen Begin
                            
                            Temp_Back=LonArr(1024)
                            Back_Hist=LonArr(BIN)
                            Back_Hist_Ct = 0L

                            For i=0,1023 Do Temp_Back[i] = Anode_Histogram[Back_Index,p,i]
                                                       
                            For i=0,1023 do Begin
                                  Temp_Val=0L
                                  
                                  For j = 0,Bin_Scale-1 Do Begin
                                          Temp_Val= Temp_Val+ Temp_Back[i+j]
                                  EndFor
                                  
                                  ;
                                  ;--- Back Histogram ----
                                  ;
                                  Back_Hist[Back_Hist_Ct] = Temp_Val
                                  Back_Hist_Ct++
                                  i=i+j-1
                            EndFor
                            ;
                            ;--- Back Err---
                            ;
                            Back_Err = Sqrt(Abs(Back_Hist))
                            
                            
                            ;
                            ;---- Now Scaling--------
                            ;
                            
                            ;
                            ;--- Scale Factor
                            ;
                            Back_Scale = Double(Double(Time_Ran[Back_Index])*Double(Live_Time[Back_Index])/Double(255))
                            Source_Scale = Double(Double(Time_Ran[q])*Double(Live_Time[q])/Double(255))
                            
                            ;
                            ;---- Scaled Back and Back Error
                            ;
                            Scl_Back_Hist= Double(Double(Back_Hist)*Double(Source_Scale)/Double(Back_Scale))
                            Scl_Back_Err = Double(Double(Back_Err)*Double(Source_Scale)/Double(Back_Scale))
                            
                            ;
                            ;---- Scaled Substraction----
                            ;
                            Hist_Source = Hist
                            Hist = Hist_Source-Scl_Back_Hist
                            
                            For i = 0, N_Elements(HIst_Err)-1 Do Hist_Err[i]=Sqrt((Src_err[i]*Src_Err[i])+(Scl_Back_Err[i]*Scl_Back_Err[i]))
                         
                      EndIF Else Begin
                            Hist_Err=SQrt(ABS(Double(HIst))); 
                            Hist_Source = Hist
                      EndElse
                    ;------ continue ----
                    
                    Total_Counts = Total(Hist_Source)
                    
                    ;
                    ;--- Defining YMax
                    ;
                    Y_MAX =Max(HIST(X_MIN_Ar:X_Max_Ar))*1.2          ; Fixing Y_Max, Note X_Max fixed as we enter it in the terminal
;;;YMAX;;;  
                 ;   If Y_Max GT 3000 THen Y_MAX = 3000

                     ;
                     ;**********
                     ;============= FITTING GUI INITIATED ============
                     ;**********
                     ;
                     
                     Plot, XFIT,Hist, PSYM=10,XRANGE=[X_MIN_Val,X_MAX_Val],XSTYLE=1, YRange=[0,Y_Max], YSTyle=1,Title= 'Anode = '+STRN(p), XTitle='Channel No', YTitle = 'Counts'
                     
                     Fit_Name=''
                     Flag_Fitted = False
                     
                     ;
                     ;--- The infamous while loop ---
                     ;
                     While Flag_Fitted Eq False Do Begin
                            
                            Print, ' Choose a Fitting Function to Fit or click on DONE'
                            
                            ;
                            ;--- This is the Graphics Area to Channel Conversion. Different for different systems
                            ;
                            C_Slope = Float( (X_Max_Val-X_Min_Val)/Float(882))
                            C_Range = Float((C_Slope*60)-X_Min_Val)
                            
                            ;
                            ;--- Define and create Button Equivalents Graphics ----
                            ;
                            Polyfill, [880,880,928, 928], [440,498,498,440], Color=CgColor('Purple'),/DEVICE
                            XYOUTS, 890, 465, 'DONE', /Device
        
                            Polyfill, [822,822,870, 870], [440,498,498,440], Color=CgColor('ORANGE'),/DEVICE
                            XYOUTS, 832, 465, 'EXP', COLOR=CgColor('Black'),/Device
                            
                            Polyfill, [764,764,812, 812], [473,498,498,473], Color=CgColor('ORANGE'),/DEVICE
                            XYOUTS, 772, 485, 'QUAD', COLOR=CgColor('Black'),/Device
                            
                            Polyfill, [706,706,754, 754], [473,498,498,473], Color=CgColor('ORANGE'),/DEVICE
                            XYOUTS, 715, 485, 'POLY', COLOR=CgColor('Black'),/Device
                            
                            Polyfill, [764,764,812, 812], [440,465,465,440], Color=CgColor('ORANGE'),/DEVICE
                            XYOUTS, 770, 450, '2GAUSS', COLOR=CgColor('Black'),/Device
                            
                            Polyfill, [706,706,754, 754], [440,465,465,440], Color=CgColor('ORANGE'),/DEVICE
                            XYOUTS, 715, 450, 'GAUSS', COLOR=CgColor('Black'),/Device
        
                              
                            Cursor, X_Value, Y_Value, /DOWN, /DEVICE
                            ;
                            ;-- If Clicked Done --
                            ;
                            IF( X_Value GE 880) AND ( Y_VALUE GE 440 ) Then BEgin
                                  Flag_Fitted = True
                                  Print, '-----------------Fitted ( Moving On )---------------------'
                                  GOTO, JUMP_Fitted
                            ENDIF
        
                            ;
                            ;--- Define a value/variable (F) for where clicked ---
                            ;
        
                            If( (X_Value GE 822) And (X_Value LE 870) AND (Y_Value GE 440) And (Y_Value LE 498) ) Then F=0 $
                                Else If( (X_Value GE 764) And (X_Value LE 812) AND (Y_Value GE 473) And (Y_Value LE 498) ) Then F=1 $
                                  Else If ( (X_Value GE 706) And (X_Value LE 754) AND (Y_Value GE 473) And (Y_Value LE 498) ) Then F=2 $
                                    Else If ( (X_Value GE 764) And (X_Value LE 812) AND (Y_Value GE 440) And (Y_Value LE 465) ) Then F=3 $
                                      Else If ( (X_Value GE 706) And (X_Value LE 754) AND (Y_Value GE 440) And (Y_Value LE 465) ) Then F=4
  
                            Plot, XFIT,Hist, PSYM=10,XRANGE=[X_MIN_Val,X_MAX_Val],XSTYLE=1,YRANGE=[0,Y_MAX],YSTYLE=1,$ 
                                                                            Title= 'Anode = '+STRN(p), XTitle='Channel No', YTitle = 'Counts'
                            
                            ;
                            ;--- Define Fit names depending on the button clicked--
                            ;
                            If F EQ 0 Then Fit_Name = 'Exponential' Else $
                              If F EQ 1 Then Fit_Name = 'Quadratic'Else $
                                If F EQ 2 Then Fit_Name = 'Polynomial' Else $
                                  If F EQ 3 Then Fit_Name = '2-Gaussian' Else $
                                    If F EQ 4 Then Fit_Name = 'Gaussian'
    
                            ;
                            ;--- Printing the function selected ---
                            ;
                            XYOUTS, 715, 450, Fit_Name, CharSize= 3, /DEVICE  ; Outputing what function we clicked to keep track of it.
                            
                            ;
                            ;--- Using Cursor to Find the Minimum channel of Data selected
                            ;
                            Cursor, X_Value0, Y_Value0, /DOWN, /DEVICE
                              min_Chan_Val = Float(X_Value0*C_Slope-c_Range)
                                min_Chan= FIX(min_Chan_Val/(Bin_Scale))
                                  PolyFill, [X_Value0,X_Value0,X_Value0+1, X_Value0+1],[Y_Value0-1000,Y_Value0+1000,Y_Value0+1000, Y_Value0-1000], Color=CgColor('Yellow'),/Device
                                    Print, ' Min Channel = ' + Strn(min_Chan_Val)
                            
                            ;
                            ;--- Using Cursor to Find the Maximum channel of Data selected
                            ;
                            Print, ' Click For Maximum '
                              Cursor, X_Value1, Y_Value1,  /DOWN, /DEVICE
                                max_Chan_Val= Float(X_Value1*C_Slope-c_Range)
                                  Max_Chan=     Fix(max_Chan_Val/BIN_Scale)
                                    PolyFill, [X_Value1,X_Value1,X_Value1+1, X_Value1+1],[Y_Value1-1000,Y_Value1+1000,Y_Value1+1000, Y_Value1-1000], Color=CgColor('Yellow'),/Device
                                      Print, ' Max Channel =' + Strn(max_Chan_Val)
  
                            ;
                            ;--- Using Cursor to Get the Initial starting position for the Peak position.
                            ;
                            Print, ' Click For Starting PEAK position '
                              Cursor, X_Value2, Y_Value2, /Down, /DEVICE
                                Peak_Chan_Val = Float(X_Value2*C_Slope-c_Range)
                                  Peak_Chan = FIX(Peak_Chan_Val/BIN_Scale)
                                    PolyFill, [X_Value2-2,X_Value2-1,X_Value2+1, X_Value2+1],[Y_Value2-5,Y_Value2+5,Y_Value2+5, Y_Value2-5], Color=CgColor('Orange'),/Device
                                      Print, ' Peak Channel =' + STrn(PEak_Chan_Val)
                            
                            ;
                            ;---Failsafe check---
                            ;
                            If Min_Chan GT Max_Chan Then BEgin
                                Temp_A= Min_Chan
                                Min_Chan = Max_Chan
                                Max_Chan = Temp_A
                            EndIf
                            
                            ;
                            ;---- Extract the selected Information----
                            ;
                            Hist1     = Hist(min_Chan:Max_Chan)
                            Xfit1     = Xfit(min_Chan:Max_Chan)
                            Hist1_Err = Hist_Err(min_Chan:Max_Chan)
                            
                            ;
                            ;==== START THE FITS based on clicks which are give a F value. ====
                            ;       (We use the MPFIT package to fit them)
                            ;
                            Case F OF
                            0: BEGIN ; This is for the Exponential.
                                  Jump_Exponential:                         ; For Jumps from not defined places.
                                  A0=-Max(Hist1)/2
                                  A1=Peak_Chan_Val
                                  A2=20
                                  A3=10000
                                  A4=Max(Hist1)
                                  A5=0.1
                                  A6=Min_Chan_Val-1
                                  A7 =3
                                  
                                  Par = replicate({value:0.D, fixed:0, limited:[0,0], limits:[0.D,0]}, 8)
      
                                  Par[0].limited(1) = 1
                                  Par[0].limits(1)  = 0
                                  Par[0].limited(0) = 1
                                  Par[0].limits(0)  = -Max(Hist1)
                                  
                                  Par[1].limited(0) = 1
                                  Par[1].limits(0)  = 1
                                  Par[1].limited(1) = 1
                                  Par[1].limits(1)  = Max_Chan_Val
                                  
                                  Par[2].limited(0) = 1
                                  Par[2].limits(0)  = 1.0
                                  
                                  Par[3].limited(0) = 1
                                  Par[3].limits(0)  = 1.0
                                  Par[3].limited(1) = 1
                                  Par[3].limits(1)  = 2*Total_Counts
                                  
                                  Par[4].limited(0) = 1
                                  Par[4].limits(0)   = -0.1
                                  
                                  Par[6].limited(0) =1
                                  Par[6].limits(0)=min_Chan_Val-1
                                  
                                  Par[*].Value = [A0,A1,A2,A3,A4,A5,A6,A7]
                                  
                                  expr = 'P[0] + Gauss1(X, P[1:3]) + P[4]*Exp(P[7]/(X-P[6])^P[5])'
                                  
                                  Fit = mpfitexpr(expr, Xfit1, Hist1, Hist1_Err, ParInfo=Par, NPRINT=0, PError=Er, BestNorm= BEstNorm, Weights=1/(Hist1_Err*Hist1_Err))
                                  
                                  G_Fit = Gauss1(Xfit1, Fit[1:3])
                                  E_Fit = Fit[4]*Exp(Fit[7]/(Xfit1-Fit[6])^Fit[5])
                                  Continium_Fit = E_Fit + Fit[0]
                                  
                                  fitted = G_Fit+Continium_Fit
                                  
                                  oplot, Xfit1, g_Fit, Color=CgColor('green'), Thick= 1
                                  oplot, Xfit1, fitted, Color=CgColor('RED'), Thick = 3
                                  oplot, Xfit1, Continium_Fit, Color=CgColor('Pink'), Thick =1
                                  
                                  DOF      = N_ELEMENTS(XFit1) - N_ELEMENTS(Par) ; deg of freedom
                                  PCERROR = Er * SQRT(BESTNORM / DOF)   ; scaled uncertainties
                                  FWHM = 2 * Sqrt(2*Alog(2))* Fit[2]
                                  Chisqr = (BESTNORM / DOF) 
                                  
                                  XYOUTS,300,470, 'FWHM ='+Strn(FWHM), /DEVICE
                                  XYOUTS,300,480, 'Centroid =' +Strn(Fit[1]), /DEvice
                                  XYOUTS,300,460, 'Red Chisq ='+Strn(Chisqr), /Device
                                  ;
                                  ;==== Creating a String of Fitted Parameters and Errors ===
                                  ;
                                  Temp_Str =Strn(p)+ '  '+Strn(F) + '  '+Ener
                                  For i = 0,N_Elements(Fit)-1 Do begin
                                    Temp_FitOut= String(Format='(D10.3,X)', Fit[i])
                                    Temp_PCERror= String(Format='(D11.4,X)', PCERROR[i])
                                    Temp_Str = TEmp_Str+ '   '+Temp_FitOut+ '   '+Temp_PCERROR
                                  Endfor
                                  Temp_Str = Temp_Str
                                  Print, Temp_Str
                                 
                            END
                            1: BEGIN ; This is for QUADRATIC
                                  
                                  Q0 = Hist[min_Chan]
                                  Q1 = Peak_Chan_Val
                                  Q2 = 15
                                  Q3 = Hist[peak_Chan]*5
                                  Q4 = -10
                                  Q5 = 2.0
                                  Q6 = Max_Chan_Val
                                  
                                  Par = replicate({value:0.D, fixed:0, limited:[0,0], limits:[0.D,0]}, 7)
                                  
                                  Par[0].limited(1) = 1
                                  Par[0].limits(1)  = Max(Hist1)
                                  Par[0].limited(0) = 1
                                  Par[0].limits(0)  = 0.0
                                  
                                  Par[1].limited(0) = 1
                                  Par[1].limits(0)  = 1
                                  Par[1].limited(1) = 1
                                  Par[1].limits(1)  = Max_Chan_Val
                                  
                                  Par[2].limited(0) = 1
                                  Par[2].limits(0)  = 1.0
                                  
                                  Par[3].limited(0) = 1
                                  Par[3].limits(0)  = 1.0
                                  Par[3].limited(1) = 1
                                  Par[3].limits(1)  = 2*Total_Counts
                                  
                                  Par[4].Limited(1) = 1
                                  Par[4].limits(1)  = 1.0
                                  
                                  Par[5].limited(0) = 1
                                  Par[5].limits(0)  = 0.0
                                  
                                  Par[*].Value = [Q0,Q1,Q2,Q3,Q4,Q5,Q6]
                                  
                                  Expr = 'P[0] + Gauss1(X, P[1:3]) + P[4]*X + P[5]*(X-P[6])*(X-P[6])'
                                  
                                  Fit = mpfitexpr(expr, Xfit1, Hist1, Hist1_Err, ParInfo=Par, NPRINT=0, PError=Er, BestNorm= BEstNorm, Weights=(1/(Hist1_Err*Hist1_Err)))
                                  
                                  G_Fit = Gauss1(Xfit1, Fit[1:3])
                                  Q_Fit = Fit[5]*(Xfit1-Fit[6])*(Xfit1-Fit[6])
                                  L_Fit = Fit[4]*Xfit1
                                  Continium_Fit = Fit[0]+ Q_Fit+ L_Fit
                                  
                                  Fitted = Continium_Fit+ G_Fit
                                  
                                  oplot, Xfit1, G_Fit, Color=CgColor('green'), Thick= 1
                                  oplot, Xfit1, fitted, Color=CgColor('RED'), Thick = 3
                                  oplot, Xfit1, Continium_Fit, Color=CgColor('Pink'), Thick =1
                                  
                                  DOF      = N_ELEMENTS(XFit1) - N_ELEMENTS(Par) ; deg of freedom
                                  PCERROR = Er * SQRT(BESTNORM / DOF)   ; scaled uncertainties
                                  FWHM = 2 * Sqrt(2*Alog(2))* Fit[2]
                                  Chisqr = (BESTNORM / DOF)
                                  
                                  XYOUTS,300,470, 'FWHM ='+Strn(FWHM), /DEVICE
                                  XYOUTS,300,480, 'Centroid =' +Strn(Fit[1]), /DEvice
                                  XYOUTS,300,460, 'Red Chisq ='+Strn(Chisqr), /Device
                                  ;
                                  ;==== Creating a String of Fitted Parameters and Errors ===
                                  ;
                                  Temp_Str =Strn(p)+ '  '+Strn(F) + '  '+Ener
                                  For i = 0,N_Elements(Fit)-1 Do begin
                                    Temp_FitOut= String(Format='(D10.3,X)', Fit[i])
                                    Temp_PCERror= String(Format='(D11.4,X)', PCERROR[i])
                                    Print, PCERROR[i]
                                    Temp_Str = TEmp_Str+ '   '+Temp_FitOut+ '   '+Temp_PCERROR
                                  Endfor
                                  Temp_Str = Temp_Str
                                  
                                  Print, Temp_Str
                                  
                            END
                            2: Begin ; Polyfit  Polymeric Continium
                                  
                                  P0 = 0
                                  P1 = Peak_Chan_Val
                                  P2 = 15
                                  P3 = Hist[peak_Chan]*5
                                  P4 = 2
                                  P5 = Min_chan_Val-3
                                  P6 = 1.0
                                  
                                  If P0 EQ 0 then P0 = -1
                                  Par = replicate({value:0.D, fixed:0, limited:[0,0], limits:[0.D,0]}, 7)
                                  
                                  Par[0].limited(1) = 1
                                  Par[0].limits(1)  = Hist(Peak_Chan)
                                  Par[0].limited(0) = 1
                                  Par[0].limits(0)  = -Max(Hist1)
                                  
                                  Par[1].limited(0) = 1
                                  Par[1].limits(0)  = Min_Chan_Val ; Peak_Chan_Val-40
                                  Par[1].limited(1) = 1
                                  Par[1].limits(1)  = Max_Chan_Val ;Peak_Chan_Val+40
                                  
                                  Par[2].limited(0) = 1
                                  Par[2].limits(0)  = 1.0
                                  
                                  Par[3].limited(0) = 1
                                  Par[3].limits(0)  = 1.0
                                  Par[3].limited(1) = 1
                                  Par[3].limits(1)  = 2*Total_Counts
                                  
                                  Par[4].Limited(0) = 1
                                  Par[4].limits(0)  = 1.0
                                  
                                  Par[5].limited(1) = 1
                                  Par[5].limits(1)  = Min_Chan_Val
                                  Par[5].limited(0) = 1
                                  Par[5].limits(0)  = 5
                                  Print,( Max(Hist1)*(-1))
                                  Par[*].Value = [P0,P1,P2,P3,P4,P5,P6]
                                  
                                  Expr = 'P[0] + Gauss1(X, P[1:3]) + P[4]/( (X-P[5])^P[6] )'
                                  
                                  Fit = mpfitexpr(expr, Xfit1, Hist1, Hist1_Err, ParInfo=Par, NPRINT=0, PError=Er, BestNorm= BEstNorm, Weights=(1/(Hist1_Err*Hist1_Err)))
                                  
                                  G_Fit = Gauss1(Xfit1, Fit[1:3])
                                  P_Fit = Fit[4]/( (Xfit1-Fit[5])^Fit[6] )
                                  Continium_Fit = Fit[0]+ P_Fit
                                  
                                  Fitted = Continium_Fit+ G_Fit
                                  
                                  
                                  oplot, Xfit1, G_Fit, Color=CgColor('green'), Thick= 1
                                  oplot, Xfit1, fitted, Color=CgColor('RED'), Thick = 3
                                  oplot, Xfit1, Continium_Fit, Color=CgColor('Pink'), Thick =1
                                  
                                  DOF      = N_ELEMENTS(XFit1) - N_ELEMENTS(Par) ; deg of freedom
                                  PCERROR = Er * SQRT(BESTNORM / DOF)   ; scaled uncertainties
                                  FWHM = 2 * Sqrt(2*Alog(2))* Fit[2]
                                  Chisqr = (BESTNORM / DOF)
                                  
                                  XYOUTS,300,470, 'FWHM ='+Strn(FWHM), /DEVICE
                                  XYOUTS,300,480, 'Centroid =' +Strn(Fit[1]), /DEvice
                                  XYOUTS,300,460, 'Red Chisq ='+Strn(Chisqr), /Device

                                  ;
                                  ;==== Creating a String of Fitted Parameters and Errors ===
                                  ;
                                  Temp_Str =Strn(p)+ '  '+Strn(F) + '  '+Ener
                                  
                                  For i = 0,3 Do begin
                                    Temp_FitOut= String(Format='(D10.3,X)', Fit[i])
                                    Temp_PCERror= String(Format='(D11.4,X)', PCERROR[i])
                                    Temp_Str = TEmp_Str+ '   '+Temp_FitOut+ '   '+Temp_PCERROR
                                  Endfor
                                  
                                  Temp_FitOut= String(Format='(D15.3,X)', Fit[4])
                                  Temp_PCERror= String(Format='(D16.4,X)', PCERROR[4])
                                  Temp_Str = TEmp_Str+ '   '+Temp_FitOut+ '   '+Temp_PCERROR
                                  
                                  For i = 5,N_Elements(Fit)-1 Do Begin
                                    Temp_FitOut= String(Format='(D10.3,X)', Fit[i])
                                    Temp_PCERror= String(Format='(D11.4,X)', PCERROR[i])
                                    Temp_Str = TEmp_Str+ '   '+Temp_FitOut+ '   '+Temp_PCERROR
                                  EndFor
                                  
                                  Print, Temp_Str
                            End
                            3: Begin ; Double Gaussian.
                                
                                  ; Using Cursor to Get the Initial starting position for the Peak position.
                                  Print, ' Click For 2nd Starting PEAK position '
                                  Cursor, X_Value3, Y_Value3, /Down, /DEVICE
                                  Peak_Chan_Val2 = Float(X_Value3*C_Slope-c_Range)
                                  Peak_Chan2 = FIX(Peak_Chan_Val2/BIN_Scale)
                                  PolyFill, [X_Value3-2,X_Value3-1,X_Value3+1, X_Value3+1],[Y_Value3-5,Y_Value3+5,Y_Value3+5, Y_Value3-5], Color=CgColor('Orange'),/Device
                                  Print, ' Peak Channel 2 =' + STrn(PEak_Chan_Val2)
                                  P0 = 0L
                                  P1 = Peak_Chan_Val
                                  P2 = 15
                                  P3 = Hist[peak_Chan]*5
                                  P4 = Peak_Chan_Val2
                                  P5 = 15
                                  P6 = Hist[peak_Chan2]*5
                                  
                                  
                                  Par = replicate({value:0.D, fixed:0, limited:[0,0], limits:[0.D,0]}, 7)
                                  print, Total_Counts
                                  Par[0].limited(1) = 1
                                  Par[0].limits(1)  = Hist(Peak_Chan)
                                  Par[0].limited(0) = 1
                                  Par[0].limits(0)  = -Max(Hist1)
                                  Par[0].fixed=1
                                  
                                  Par[1].limited(0) = 1
                                  Par[1].limits(0)  = Peak_Chan_Val-20
                                  Par[1].limited(1) = 1
                                  Par[1].limits(1)  = Peak_Chan_Val+20
                                  
                                  Par[2].limited(0) = 1
                                  Par[2].limits(0)  = 1.0
                                  
                                  Par[3].limited(0) = 1
                                  Par[3].limits(0)  = 1.0
                                  ;                                                Par[3].limited(1) = 1
                                  ;                                                Par[3].limits(1)  = 2*Total_Counts
                                  ;
                                  
                                  Par[4].limited(1) = 1
                                  Par[4].limits(1)  = Peak_Chan_Val+40
                                  
                                  Par[5].Limited(0) = 1
                                  Par[5].limits(0)  = 1.0
                                  
                                  Par[6].limited(0) = 1
                                  Par[6].limits(0)  = 1.0
                                  ;                                                Par[6].limited(1) = 1
                                  ;                                                Par[6].limits(1)  = 2*Total_Counts
                                  
                                  Par[*].Value = [P0,P1,P2,P3,P4,P5,P6]
                                  
                                  Expr = 'P[0] + Gauss1(X, P[4:6]) + Gauss1(X,P[1:3] )'
                                  
                                  Print, Hist1_err
                                  Fit = mpfitexpr(expr, Xfit1, Hist1, Hist1_Err, ParInfo=Par, NPRINT=0, PError=Er, BestNorm= BEstNorm, Weights=(1/(Hist1_Err*Hist1_Err)))
                                  
                                  G_Fit = Gauss1(Xfit1, Fit[1:3])
                                  G_Fit2 = Gauss1(Xfit1, Fit[4:6])
                                  Continium_Fit = Fit[0]+ G_Fit2
                                  
                                  Fitted = Continium_Fit+ G_Fit
                                  
                                  oplot, Xfit1, G_Fit, Color=CgColor('green'), Thick= 1
                                  oplot, Xfit1, fitted, Color=CgColor('RED'), Thick = 3
                                  oplot, Xfit1, Continium_Fit, Color=CgColor('Pink'), Thick =1
                                  
                                  DOF      = N_ELEMENTS(XFit1) - N_ELEMENTS(Par) ; deg of freedom
                                  PCERROR = Er * SQRT(BESTNORM / DOF)   ; scaled uncertainties
                                  FWHM = 2 * Sqrt(2*Alog(2))* Fit[2]
                                  Chisqr = (BESTNORM / DOF)
                                  
                                  XYOUTS,300,470, 'FWHM ='+Strn(FWHM), /DEVICE
                                  XYOUTS,300,480, 'Centroid =' +Strn(Fit[1]), /DEvice
                                  XYOUTS,300,460, 'Red Chisq ='+Strn(Chisqr), /Device
                                  ;
                                  ;==== Creating a String of Fitted Parameters and Errors ===
                                  ;
                                  
                                  Temp_Str =Strn(p)+ '  '+Strn(F) + '  '+Ener
                                  For i = 0,3 Do begin
                                    Temp_FitOut= String(Format='(D10.3,X)', Fit[i])
                                    Temp_PCERror= String(Format='(D11.4,X)', PCERROR[i])
                                    Temp_Str = TEmp_Str+ '   '+Temp_FitOut+ '   '+Temp_PCERROR
                                  Endfor
                                  
                                  Temp_FitOut= String(Format='(D15.3,X)', Fit[4])
                                  Temp_PCERror= String(Format='(D16.4,X)', PCERROR[4])
                                  Temp_Str = TEmp_Str+ '   '+Temp_FitOut+ '   '+Temp_PCERROR
                                  
                                  For i = 5,N_Elements(Fit)-1 Do Begin
                                    Temp_FitOut= String(Format='(D10.3,X)', Fit[i])
                                    Temp_PCERror= String(Format='(D11.4,X)', PCERROR[i])
                                    Temp_Str = TEmp_Str+ '   '+Temp_FitOut+ '   '+Temp_PCERROR
                                  EndFor
                                  
                                  Print, Temp_Str
                            End
                            4: Begin ; Gaussian Fit
                                  
                                  P0 = 0
                                  P1 = Peak_Chan_Val
                                  P2 = 15
                                  P3 = Hist[peak_Chan]*5
                                  
                                  Par = replicate({value:0.D, fixed:0, limited:[0,0], limits:[0.D,0]}, 4)
                                  
                                  Par[1].limited(0) = 1D
                                  Par[1].limits(0)  = Double(Peak_Chan_Val-40)
                                  Par[1].limited(1) = 1D
                                  Par[1].limits(1)  = Double(Peak_Chan_Val+40)
                                  
                                  Par[2].limited(0) = 1D
                                  Par[2].limits(0)  = 1.0D
                                  
                                  Par[3].limited(0) = 1D
                                  Par[3].limits(0)  = 1.0D
                                  Par[3].limited(1) = 1D
                                  Par[3].limits(1)  = 5D*Total_Counts
                                  
                                  Par[*].Value = [P0,P1,P2,P3]
                                  
                                  Expr = 'Gauss1(X,P[1:3])'
                            
                                  Fit = mpfitexpr(expr, Xfit1, Hist1, Hist1_Err, ParInfo=Par, NPRINT=0, PError=Er, BestNorm= BEstNorm, Weights=(1/(Hist1_Err*Hist1_Err)))
                                  
                                  G_Fit = Gauss1(Xfit1, Fit[1:3])
                                  
                                  Fitted =G_Fit
                                  Continium_Fit = 0*Xfit1
                                  
                                  oplot, Xfit1, fitted, Color=CgColor('RED'), Thick = 2
                                  
                                  DOF      = N_ELEMENTS(XFit1) - N_ELEMENTS(Par) ; deg of freedom
                                  PCERROR = Er * SQRT(BESTNORM / DOF)   ; scaled uncertainties
                                  FWHM = 2 * Sqrt(2*Alog(2))* Fit[2]
                                  Chisqr = (BESTNORM / DOF)
                                 
                                  XYOUTS,300,460, 'Red Chisq ='+Strn(Chisqr), /Device
                                  XYOUTS,300,470, 'FWHM ='+Strn(FWHM), /DEVICE
                                  XYOUTS,300,480, 'Centroid =' +Strn(Fit[1]), /DEvice

                                  ;
                                  ;==== Creating a String of Fitted Parameters and Errors ===
                                  ;
                                  Temp_Str =Strn(p)+ '  '+Strn(F) + '  '+Ener
                                  
                                  For i = 0,N_Elements(Fit)-1 Do begin
                                    Temp_FitOut= String(Format='(D10.3,X)', Fit[i])
                                    Temp_PCERror= String(Format='(D11.4,X)', PCERROR[i])
                                    Temp_Str = TEmp_Str+ '   '+Temp_FitOut+ '   '+Temp_PCERROR
                                  Endfor
                                  
                                  Temp_Str = Temp_Str
                                  Print, Temp_Str
                            End
                            ELSE: Print, ' Invalid Case '
                                
                            EndCase
                     
                            JUMP_FITTED:
                    EndWhile
                     
                    ;
                    ;--- Print the formatted parameters in the text file.
                    ;
                    Printf, Lun, Temp_Str
                    Free_Lun, Lun

                    ;
                    ;---- Generating a post script Plot -----
                    ;
                    
                    ;
                    ;-- Define the output folder--  
                    ;
                    Output_Folder_Path = InputFileFolderPath+'Fitted_'+Source[q]+'_'+Ener+Folder_Val+'_KEV'
                    If Dir_Exist(Output_Folder_Path) EQ False Then File_MKdir, Output_Folder_Path
                    Output_File= Output_Folder_Path+'/'+Module[q]+'_'+Source[q]+'_Anode_'+STRN(p)+'_Fitted_Peak'
                    
                    ;
                    ;-- Y Max Parameters ---
                    ;
                    If Inves_Flag Eq True THen BEgin
                      Y_MAX = 1.2*Max(Hist_Source)
                      Y_MIn = -Y_MAx
                    EndIf Else Begin
                      Y_Min = 0
                    EndElse
                    
                    ;
                    ;--- Few Text Parameteres
                    ;
                    Temp_Str0= Source[q]
                    Temp_Str4= String(Format= '("Centroid =" ,(F7.3,X)," +/- ",(F6.3) )',Fit[1], PCERROR[1])
                    Temp_Str1= String(Format= '("FWHM     ="(F7.3))',FWHM)
                    Temp_Str6 = String(Format='("Chisqr   ="(F7.3))',Chisqr)
                    Temp_Str2= String(Format= '("Counts   =",(I0) )', Total_Counts)
                    Temp_Str3= Module[q]
                    Temp_Str5= 'BINS='+STRN(BIN)
                    
                    ;
                    ;-- PS Plot
                    ;
                    Set_Plot, 'PS'
                    loadct, 13                           ; load color
                    Device, File = Output_File, /COLOR,/Portrait
                    Device, /inches, xsize = 7.0, ysize = 9.0, xoffset = 0.75, yoffset = 1.0, font_size = 9, scale_factor = 1.0

                          Plot, XFIT,Hist_Source, PSYM=10,XRANGE=[X_MIN_val,X_MAX_Val],XSTYLE=1,YRANGE=[Y_Min,Y_MAx],$
                            YSTYLE=1, Title= 'Anode = '+STRN(p), XTitle='Channel No', YTitle = 'Counts', CharSize= 2,/NoData
      
                          Oplot, XFIt, Hist, PSYM=10
                          
                          If Inves_Flag Eq True THen BEgin
                            Oplot, Xfit, Hist_Source, PSYM=10, Color=CgColor('Blue')
                            Oplot, XFit, Scl_Back_Hist, PSYM=10, Color=CgColor('Dark Green')
                          EndIf
                          
                          oplot, Xfit1, g_Fit, Color=CgColor('green'), Thick=1.5
                          oplot, Xfit1, fitted, Color=CgColor('RED'), Thick=2
                          oplot, Xfit1, Continium_Fit, Color=CgColor('Blue'), Thick=1.5
                          
                          XYOUTS,!D.X_Size*0.2,!D.Y_Size*0.97, Temp_Str0, CharSize=2.5,/Device
                          XYOUTS,!D.X_Size*0.5,!D.Y_Size*0.92, Temp_Str4, CharSize=1.5,/DEvice
                          XYOUTS,!D.X_Size*0.5,!D.Y_Size*0.90, Temp_Str1, CharSize=1.5,/DEvice
                          XYOUTS,!D.X_Size*0.5,!D.Y_Size*0.88, Temp_Str6, CharSize=1.5,/DEvice
                          XYOUTS,!D.X_Size*0.5,!D.Y_Size*0.86, Temp_Str2, CharSize=1.5,/DEvice
                          XYOUTS,!D.X_Size*0.8,!D.Y_Size*0.97, Temp_Str3, CharSize=2.5,/DEvice
                          XYOUTS,!D.X_Size*0.8,!D.Y_Size*0.03, Temp_Str5, CharSize=2.0,/DEvice
                    
                    Device,/Close
                    Set_Plot, 'X'
                    
                    CGPS2PDF, OutPut_File,delete_ps=1
                    Jump2:
                    If Single_Anode EQ True Then Goto, Jump1 ; Just skip the end for here.
          EndFor ; p
          Jump1:
          
      EndFor ; end q
End